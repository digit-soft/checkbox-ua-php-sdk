<?php

declare(strict_types=1);

namespace DigitSoft\Checkbox\Tests\Mappers;

use DigitSoft\Checkbox\Mappers\Transactions\TransactionsMapper;
use PHPUnit\Framework\TestCase;

class GetTransactionsTest extends TestCase
{
    /** @var  string $jsonString */
    private $jsonString;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->jsonString = '{
           "meta":{
              "limit":2,
              "offset":0
           },
           "results":[
              {
                 "id":"c301b216-10eb-4b0e-b21a-47dab1b56a64",
                 "type":"SHIFT_OPEN",
                 "serial":0,
                 "status":"DONE",
                 "request_signed_at":"2020-10-05T10:53:12.259694+00:00",
                 "request_received_at":"2020-10-05T10:53:13.315504+00:00",
                 "response_status":"OK",
                 "response_error_message":null,
                 "created_at":"2020-10-05T10:14:36.171086+00:00",
                 "updated_at":"2020-10-05T10:53:15.166567+00:00"
              },
              {
                 "id":"87dbd622-0f06-492b-9fa6-7c4237ff32dd",
                 "type":"RECEIPT",
                 "serial":4,
                 "status":"DONE",
                 "request_signed_at":"2020-10-05T11:20:33.322373+00:00",
                 "request_received_at":"2020-10-05T11:20:34.371321+00:00",
                 "response_status":"OK",
                 "response_error_message":null,
                 "created_at":"2020-10-05T11:20:32.531352+00:00",
                 "updated_at":"2020-10-05T11:20:35.003179+00:00"
              }
           ]
        }';
    }

    public function testMapShiftWithNull(): void
    {
        $this->assertNull(
            (new TransactionsMapper())->jsonToObject(null)
        );
    }

    public function testMapShiftMeta(): void
    {
        $jsonResponse = json_decode($this->jsonString, true);

        $mapped = (new TransactionsMapper())->jsonToObject($jsonResponse);

        $this->assertEquals(
            2,
            $mapped->meta->limit
        );

        $this->assertEquals(
            0,
            $mapped->meta->offset
        );
    }

    public function testMapGetShiftWithJson(): void
    {
        $jsonResponse = json_decode($this->jsonString, true);

        $mapped = (new TransactionsMapper())->jsonToObject($jsonResponse);

        $this->assertEquals(
            'c301b216-10eb-4b0e-b21a-47dab1b56a64',
            $mapped->results[0]->id
        );
        $this->assertEquals(
            '87dbd622-0f06-492b-9fa6-7c4237ff32dd',
            $mapped->results[1]->id
        );
    }
}
